{"ast":null,"code":"var _jsxFileName = \"/home/jumil/Documents/Jumil/Health App/health-app/src/Admin/Modal.jsx\";\n\n/* eslint-disable react-hooks/exhaustive-deps */\n\n/* eslint-disable no-unused-expressions */\nimport React, { useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport Input from '@material-ui/core/Input';\nimport AppConstants from '../Utils/AppConstants';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Divider from '@material-ui/core/Divider';\nimport Radio from '@material-ui/core/Radio';\nimport Modal from 'react-awesome-modal';\nimport Cookie from \"js-cookie\";\nimport Style from './Style/Modal';\nconst token = Cookie.get('token');\nconst theme = createMuiTheme({\n  palette: {\n    common: {\n      black: \"#000\",\n      white: \"#fff\",\n      indigo: \"#2c387e\"\n    },\n    type: \"light\",\n    primary: {\n      light: \"#7986cb\",\n      main: \"#357a38\",\n      dark: \"#303f9f\",\n      contrastText: \"#fff\"\n    },\n    secondary: {\n      light: \"#ff4081\",\n      main: \"#f50057\",\n      dark: \"#c51162\",\n      contrastText: \"#fff\"\n    }\n  },\n  spacing: 10,\n  typography: {\n    fontSize: 20\n  }\n});\nexport default function BranchModal(props) {\n  const classes = Style();\n  const [state, setState] = useState({\n    'name': ''\n  });\n  const [stateId, setStateId] = useState('');\n  const [states, setStates] = useState([]);\n  const [stageLoading, setStageLoading] = useState(false);\n  const [stateLoading, setStateLoading] = useState(false);\n  const [errors, setErrors] = useState({\n    name: false\n  });\n  const [errorMessage, setErrorMessage] = useState({\n    name: ''\n  });\n  const [stateErrorMessage, setStateErrorMessage] = useState({\n    status: false,\n    message: ''\n  });\n  const type = props.type === 'Edit ' ? 'Update' : 'Add';\n  const [error, setError] = useState(\"\");\n\n  const fetchstates = async () => {\n    setStateLoading(true); // await fetch(AppConstants.BACK_END_URL_DOMAIN+AppConstants.BRANCHES.toLowerCase()+'/getStates',{\n    //   method:'get',\n    //   headers: {\n    //     'Authorization': `Bearer ${Cookie.get('token')}`,\n    //   }\n    // })\n    // .then(res => res.json())\n    // .then(data => {\n    //   if(type === 'Update'){\n    //     let filteredStates = [];\n    //     data.map(state => {\n    //       let isExist = false;\n    //         if(props.data.branch_id !== null && props.data.branch_id !== undefined){\n    //             if(state.state_id === parseInt(props.data.state_id)){\n    //               isExist = true;\n    //             }\n    //         }\n    //         if(isExist) {\n    //           state.checked = true;\n    //           setStateId(state.state_id);\n    //         } else {\n    //           state.checked = false;\n    //         }\n    //         if(state.checked){\n    //           filteredStates.unshift(state)\n    //         } else {\n    //           filteredStates.push(state)\n    //         }\n    //       });\n    //       setStates(filteredStates);\n    //   } else {\n    //     data.filter(state => state.checked=false)\n    //     setStates(data);\n    //   }\n    //   setStateLoading(false);\n    // })\n\n    setStateLoading(false);\n  };\n\n  React.useEffect(() => {\n    async function fetchData() {\n      if (props.data.branch_id !== undefined) {\n        const {\n          branch_name\n        } = props.data;\n        setState({\n          name: branch_name.toUpperCase()\n        });\n      }\n\n      await fetchstates();\n    }\n\n    fetchData();\n  }, [props.data]);\n  React.useEffect(() => {\n    return () => {\n      console.log(\"cleaned up\");\n    };\n  }, []);\n\n  const handleDeptHandle = e => {\n    let filterType = [];\n    states.map(type => {\n      if (type.state_id === parseInt(e.target.value)) {\n        if (type.checked) {\n          type.checked = false;\n          setStateId('');\n        } else {\n          type.checked = true;\n          setStateId(e.target.value);\n        }\n      } else if (type.checked) {\n        type.checked = false;\n      }\n\n      filterType.push(type);\n    });\n    setStates(filterType);\n  };\n\n  const updateBranchQueue = branchId => {\n    console.log(\"-----\", branchId);\n    fetch(AppConstants.KAFKA_SERVICE_URL_DOMAIN + AppConstants.BRANCH_MASTER_SYNC, {\n      method: \"POST\",\n      body: JSON.stringify({\n        branch_id: branchId\n      })\n    });\n  };\n\n  const handleInputChange = async event => {\n    let reg = /^[#\\\\@\\\\$%\\\\^\\\\&*\\\\|\\\\\\\\//.\\]\\\\)\\\\(;:,+\"'_\\\\=!><?\\-\\\\[`~{}]|`~.\\\\\\/_\\]]+$/g;\n    let result = reg.test(event.target.value[event.target.value.length - 1]);\n\n    if (result === false) {\n      if (event.target.value.length > 30) {\n        setErrors({ ...errors,\n          \"name\": true\n        });\n        setErrorMessage({ ...errorMessage,\n          \"name\": \"Maximum 30 characters are allowed\"\n        });\n      } else {\n        const {\n          value,\n          name\n        } = event.target;\n        setState({ ...state,\n          [name]: value.toUpperCase()\n        });\n        setErrors({ ...errors,\n          \"name\": false\n        });\n        setErrorMessage({ ...errorMessage,\n          \"name\": ''\n        });\n      }\n    } else {\n      setErrors({ ...errors,\n        \"name\": true\n      });\n      setErrorMessage({ ...errorMessage,\n        \"name\": \"Special characters are not allowed\"\n      });\n    }\n  };\n\n  const reset = () => {\n    setError('');\n\n    if (props.data.branch_name !== undefined) {\n      setState({ ...state,\n        name: props.data.branch_name.toUpperCase()\n      });\n      states.filter(state => parseInt(props.data.state_id) === state.state_id ? state.checked = true : state.checked = false);\n      setStates(states);\n      setStateId(props.data.state_id);\n    } else {\n      states.filter(state => state.checked = false);\n      setStates(states);\n      setStateId(0);\n      setState({ ...state,\n        name: ''\n      });\n    }\n  };\n\n  const handleSubmit = async event => {\n    setError('');\n\n    if (state.name === '' || state.name === undefined) {\n      setErrors({ ...errors,\n        \"name\": true\n      });\n      setErrorMessage({ ...errorMessage,\n        \"name\": \"Required\"\n      });\n    } else if (stateId === undefined || stateId === 0 || stateId === '') {\n      setStateErrorMessage({ ...stateErrorMessage,\n        status: true,\n        message: 'Select a state'\n      });\n    } else {\n      setStateErrorMessage({ ...stateErrorMessage,\n        status: false,\n        message: ''\n      });\n      let URL = '';\n      let method = '';\n      let message = '';\n      setStageLoading(true);\n      let isExist = false;\n      let headers = {};\n      let body = {};\n\n      if (props.data.branch_id !== undefined) {\n        URL = AppConstants.BACK_END_URL_DOMAIN + AppConstants.BRANCHES.toLowerCase() + '/update/';\n        method = 'PUT';\n        message = \"'\" + state.name.toUpperCase() + \"' updated successfully\";\n        headers = {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${Cookie.get('token')}`\n        };\n        body = {\n          'branchId': parseInt(props.data.branch_id),\n          'name': state.name.toUpperCase(),\n          'stateId': stateId\n        };\n        await fetch(AppConstants.BACK_END_URL_DOMAIN + AppConstants.BRANCHES.toLowerCase() + '/getByName/' + state.name, {\n          method: 'get',\n          headers: {\n            'Authorization': `Bearer ${Cookie.get('token')}`\n          }\n        }).then(res => res.json()).then(data => {\n          if (data.length > 0) {\n            if (data[0].branch_id !== props.data.branch_id) {\n              isExist = true;\n            }\n          }\n        });\n      } else {\n        URL = AppConstants.BACK_END_URL_DOMAIN + AppConstants.BRANCHES.toLowerCase();\n        method = 'POST';\n        message = \"'\" + state.name.toUpperCase() + \"' added successfully\";\n        headers = {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${Cookie.get('token')}`\n        };\n        body = {\n          'name': state.name.toUpperCase(),\n          'stateId': stateId\n        };\n        await fetch(AppConstants.BACK_END_URL_DOMAIN + AppConstants.BRANCHES.toLowerCase() + '/getByName/' + state.name, {\n          method: 'get',\n          headers: {\n            'Authorization': `Bearer ${Cookie.get('token')}`\n          }\n        }).then(res => res.json()).then(data => {\n          if (data.length > 0) {\n            isExist = true;\n          }\n        });\n      }\n\n      if (!isExist) {\n        await fetch(URL, {\n          method: method,\n          body: JSON.stringify(body),\n          headers: headers\n        }).then(res => res.json()).then(res => {\n          if (res) {\n            reset();\n            setStageLoading(false);\n\n            if (method === 'POST') {\n              updateBranchQueue(res.id);\n            } else {\n              updateBranchQueue(props.data.branch_id);\n            }\n\n            props.closeModal(true, message);\n          } else {\n            const error = new Error(res.error);\n            setStageLoading(false);\n            throw error;\n          }\n        }).catch(err => {\n          setError('Invalid data. Please try again');\n          setStageLoading(false);\n        });\n      } else {\n        setErrors({ ...errors,\n          \"name\": true\n        });\n        setErrorMessage({ ...errorMessage,\n          \"name\": \"Course specification already exists\"\n        });\n        setStageLoading(false);\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(ThemeProvider, {\n    theme: theme,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    component: \"main\",\n    maxWidth: \"md\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CssBaseline, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.paper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    required: true,\n    error: error,\n    onSubmit: e => {\n      e.preventDefault();\n      handleSubmit();\n    },\n    component: \"fieldset\",\n    className: classes.form,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    variant: \"outlined\",\n    margin: \"normal\",\n    fullWidth: true,\n    id: \"standard-required\",\n    label: \"Health Team Name\",\n    name: \"name\",\n    autoComplete: \"off\",\n    onFocus: () => {\n      setErrors({ ...errors,\n        \"name\": false\n      });\n      setErrorMessage({ ...errorMessage,\n        \"name\": \"\"\n      });\n    },\n    error: errors[\"name\"],\n    helperText: errorMessage[\"name\"],\n    autoFocus: true,\n    value: state.name,\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    variant: \"outlined\",\n    margin: \"normal\",\n    fullWidth: true,\n    id: \"standard-required\",\n    label: \"Email\",\n    name: \"name\",\n    autoComplete: \"off\",\n    onFocus: () => {\n      setErrors({ ...errors,\n        \"name\": false\n      });\n      setErrorMessage({ ...errorMessage,\n        \"name\": \"\"\n      });\n    },\n    error: errors[\"name\"],\n    helperText: errorMessage[\"name\"],\n    autoFocus: true,\n    value: state.name,\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    variant: \"outlined\",\n    margin: \"normal\",\n    fullWidth: true,\n    id: \"standard-required\",\n    label: \"Phone\",\n    name: \"name\",\n    autoComplete: \"off\",\n    onFocus: () => {\n      setErrors({ ...errors,\n        \"name\": false\n      });\n      setErrorMessage({ ...errorMessage,\n        \"name\": \"\"\n      });\n    },\n    error: errors[\"name\"],\n    helperText: errorMessage[\"name\"],\n    autoFocus: true,\n    value: state.name,\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    variant: \"outlined\",\n    margin: \"normal\",\n    fullWidth: true,\n    id: \"standard-required\",\n    label: \"Pin\",\n    name: \"name\",\n    autoComplete: \"off\",\n    onFocus: () => {\n      setErrors({ ...errors,\n        \"name\": false\n      });\n      setErrorMessage({ ...errorMessage,\n        \"name\": \"\"\n      });\n    },\n    error: errors[\"name\"],\n    helperText: errorMessage[\"name\"],\n    autoFocus: true,\n    value: state.name,\n    onChange: handleInputChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.formButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    fullWidth: true,\n    className: classes.reset,\n    onClick: reset,\n    disabled: stateLoading || stageLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 11\n    }\n  }, type === 'Add' ? 'Clear' : 'Reset'), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    variant: \"contained\",\n    color: \"red\",\n    disabled: stateLoading || stageLoading,\n    fullWidth: true,\n    id: \"submit\",\n    className: classes.submit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 15\n    }\n  }, type, \" \", stageLoading ? /*#__PURE__*/React.createElement(CircularProgress, {\n    size: 15,\n    color: \"primary\",\n    className: classes.submitLoadingIcon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 40\n    }\n  }) : '')))), /*#__PURE__*/React.createElement(Divider, {\n    className: classes.dividerBottom,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 7\n    }\n  })));\n}","map":{"version":3,"sources":["/home/jumil/Documents/Jumil/Health App/health-app/src/Admin/Modal.jsx"],"names":["React","useState","Button","CssBaseline","TextField","ThemeProvider","createMuiTheme","Container","FormGroup","Input","AppConstants","CircularProgress","FormControlLabel","Divider","Radio","Modal","Cookie","Style","token","get","theme","palette","common","black","white","indigo","type","primary","light","main","dark","contrastText","secondary","spacing","typography","fontSize","BranchModal","props","classes","state","setState","stateId","setStateId","states","setStates","stageLoading","setStageLoading","stateLoading","setStateLoading","errors","setErrors","name","errorMessage","setErrorMessage","stateErrorMessage","setStateErrorMessage","status","message","error","setError","fetchstates","useEffect","fetchData","data","branch_id","undefined","branch_name","toUpperCase","console","log","handleDeptHandle","e","filterType","map","state_id","parseInt","target","value","checked","push","updateBranchQueue","branchId","fetch","KAFKA_SERVICE_URL_DOMAIN","BRANCH_MASTER_SYNC","method","body","JSON","stringify","handleInputChange","event","reg","result","test","length","reset","filter","handleSubmit","URL","isExist","headers","BACK_END_URL_DOMAIN","BRANCHES","toLowerCase","then","res","json","id","closeModal","Error","catch","err","paper","preventDefault","form","formButton","submit","submitLoadingIcon","dividerBottom"],"mappings":"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","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\n/* eslint-disable no-unused-expressions */\nimport React ,{useState} from 'react';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport {ThemeProvider ,createMuiTheme} from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport FormGroup from '@material-ui/core/FormGroup';  \nimport Input from '@material-ui/core/Input';\nimport AppConstants from '../Utils/AppConstants';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Divider from '@material-ui/core/Divider';\nimport Radio from '@material-ui/core/Radio';\nimport Modal from 'react-awesome-modal';\nimport Cookie from \"js-cookie\";\nimport Style from './Style/Modal';\n\nconst token = Cookie.get('token');\n\nconst theme = createMuiTheme({\n  palette: {\n    common: {\n      black: \"#000\",\n      white: \"#fff\",\n      indigo:\"#2c387e\"\n    },\n    type: \"light\",\n    primary:{\n      light: \"#7986cb\",\n      main: \"#357a38\",\n      dark: \"#303f9f\",\n      contrastText: \"#fff\"\n    },\n    secondary:{\n    light: \"#ff4081\",\n    main: \"#f50057\",\n    dark: \"#c51162\",\n    contrastText: \"#fff\"}},\n    spacing:10,\n    typography: {\n    fontSize: 20,\n  },\n})\n\nexport default function BranchModal(props) {\n  const classes = Style();\n  const[state,setState]=useState({'name':''});\n  const[stateId,setStateId]=useState('');\n  const[states,setStates]=useState([]);\n  const [stageLoading, setStageLoading] = useState(false);\n  const [stateLoading, setStateLoading] = useState(false);\n  const [errors,setErrors]=useState({name:false});\n  const [errorMessage,setErrorMessage]=useState({name:''});\n  const [stateErrorMessage, setStateErrorMessage] = useState({status:false,message:''});\n  const type = props.type === 'Edit ' ? 'Update' : 'Add'\n  const[error,setError]=useState(\"\")\n\n  const fetchstates = async() => {\n    setStateLoading(true);\n    // await fetch(AppConstants.BACK_END_URL_DOMAIN+AppConstants.BRANCHES.toLowerCase()+'/getStates',{\n    //   method:'get',\n    //   headers: {\n    //     'Authorization': `Bearer ${Cookie.get('token')}`,\n    //   }\n    // })\n    // .then(res => res.json())\n    // .then(data => {\n    //   if(type === 'Update'){\n    //     let filteredStates = [];\n    //     data.map(state => {\n    //       let isExist = false;\n    //         if(props.data.branch_id !== null && props.data.branch_id !== undefined){\n    //             if(state.state_id === parseInt(props.data.state_id)){\n    //               isExist = true;\n    //             }\n    //         }\n    //         if(isExist) {\n    //           state.checked = true;\n    //           setStateId(state.state_id);\n    //         } else {\n    //           state.checked = false;\n    //         }\n    //         if(state.checked){\n    //           filteredStates.unshift(state)\n    //         } else {\n    //           filteredStates.push(state)\n    //         }\n    //       });\n    //       setStates(filteredStates);\n    //   } else {\n    //     data.filter(state => state.checked=false)\n    //     setStates(data);\n    //   }\n    //   setStateLoading(false);\n    // })\n    setStateLoading(false);\n  }\n  \n  React.useEffect(()=>{\n      async function fetchData(){\n            if(props.data.branch_id !== undefined){\n                const { branch_name} = props.data;\n                setState({name:branch_name.toUpperCase()})\n            }\n            await fetchstates();\n        }\n        fetchData();\n      },[props.data])\n      React.useEffect(() => {\n        return () => {\n          console.log(\"cleaned up\");\n        };\n      }, []);\n\n  const handleDeptHandle = e => {\n    let filterType = [];\n    states.map((type) => {\n      if(type.state_id === parseInt(e.target.value)){\n        if(type.checked){\n          type.checked = false;\n          setStateId('');\n        } else {\n          type.checked = true;\n          setStateId(e.target.value);\n        }\n      } else if(type.checked){\n        type.checked = false;\n      }\n      filterType.push(type)\n\n    })\n    setStates(filterType)\n  }\n     \n  const updateBranchQueue = (branchId) => {\n    console.log(\"-----\", branchId)\n    fetch(AppConstants.KAFKA_SERVICE_URL_DOMAIN + AppConstants.BRANCH_MASTER_SYNC, {\n      method: \"POST\",\n      body: JSON.stringify({branch_id: branchId})\n    })\n  }\n\n  const handleInputChange = async(event) => {\n        let reg = /^[#\\\\@\\\\$%\\\\^\\\\&*\\\\|\\\\\\\\//.\\]\\\\)\\\\(;:,+\"'_\\\\=!><?\\-\\\\[`~{}]|`~.\\\\\\/_\\]]+$/g;\n        let result = reg.test(event.target.value[event.target.value.length - 1])\n        if(result === false){\n          if(event.target.value.length > 30){\n            setErrors({...errors,\"name\":true})\n            setErrorMessage({...errorMessage,\"name\":\"Maximum 30 characters are allowed\"})\n          } else {\n            const { value, name } = event.target;\n            setState({...state,[name]:value.toUpperCase()});\n            setErrors({...errors,\"name\":false})\n            setErrorMessage({...errorMessage,\"name\":''})\n          }\n        } else {\n          setErrors({...errors,\"name\":true})\n          setErrorMessage({...errorMessage,\"name\":\"Special characters are not allowed\"})\n        }\n  }\n\n  const reset = () => {\n    setError('');\n    if(props.data.branch_name !== undefined){\n      setState({...state,name:props.data.branch_name.toUpperCase()});\n      states.filter(state => parseInt(props.data.state_id)=== state.state_id?state.checked=true:state.checked=false)\n      setStates(states);\n      setStateId(props.data.state_id)\n    } else {\n      states.filter(state => state.checked=false)\n      setStates(states);\n      setStateId(0)\n      setState({...state,name:''});\n    }\n  }\n\n  const handleSubmit = async(event) => {\n    setError('');\n    if(state.name === '' || state.name === undefined){\n      setErrors({...errors,\"name\":true})\n      setErrorMessage({...errorMessage,\"name\":\"Required\"})\n    }  else if(stateId === undefined || stateId === 0 || stateId === ''){\n      setStateErrorMessage({...stateErrorMessage, status: true, message:'Select a state'})\n    } else {\n      setStateErrorMessage({...stateErrorMessage, status: false, message:''})\n        let URL = '';\n        let method = '';\n        let message = '';\n        setStageLoading(true);\n        let isExist = false;\n        let headers = {};\n        let body = {};\n        if(props.data.branch_id !== undefined){\n            URL= AppConstants.BACK_END_URL_DOMAIN + AppConstants.BRANCHES.toLowerCase() + '/update/';\n            method= 'PUT';\n            message = \"'\" + state.name.toUpperCase() + \"' updated successfully\";\n            headers = {\n              'Content-Type': 'application/json',\n              'Authorization': `Bearer ${Cookie.get('token')}`,\n            }\n            body = {\n              'branchId': parseInt(props.data.branch_id),\n              'name' : state.name.toUpperCase(),\n              'stateId': stateId\n            }\n            await fetch(AppConstants.BACK_END_URL_DOMAIN+AppConstants.BRANCHES.toLowerCase()+'/getByName/'+state.name,{\n              method:'get',\n              headers: {\n                'Authorization': `Bearer ${Cookie.get('token')}`,\n              }\n            })\n            .then(res => res.json())\n            .then(data => {\n              if(data.length > 0){\n                if(data[0].branch_id !== props.data.branch_id){\n                  isExist = true;\n                }\n              }\n        });\n        } else {\n            URL= AppConstants.BACK_END_URL_DOMAIN + AppConstants.BRANCHES.toLowerCase();\n            method= 'POST';\n            message = \"'\" + state.name.toUpperCase() + \"' added successfully\";\n            headers = {\n              'Content-Type': 'application/json',\n              'Authorization': `Bearer ${Cookie.get('token')}`,\n            }\n            body = {\n              'name' : state.name.toUpperCase(),\n              'stateId': stateId\n            }\n            await fetch(AppConstants.BACK_END_URL_DOMAIN+AppConstants.BRANCHES.toLowerCase() + '/getByName/' + state.name,{\n              method:'get',\n              headers: {\n                'Authorization': `Bearer ${Cookie.get('token')}`,\n              }\n            })\n            .then(res => res.json())\n            .then(data => {\n              if(data.length > 0){\n                  isExist = true;\n              }\n        });\n        }\n        if(!isExist){\n          await fetch(URL, {\n            method: method,\n            body: JSON.stringify(body),\n            headers: headers\n          })\n          .then(res => res.json())\n          .then(res => {\n            if (res) {\n                reset();\n                setStageLoading(false);\n                if(method === 'POST'){\n                  updateBranchQueue(res.id)\n                }\n                else{\n                  updateBranchQueue(props.data.branch_id)\n                }\n                props.closeModal(true,message);\n            } else {\n                const error = new Error(res.error);\n                setStageLoading(false);\n                throw error;\n            }\n          })\n          .catch(err => {\n                setError('Invalid data. Please try again');\n                setStageLoading(false);\n          });\n        } else {\n          setErrors({...errors,\"name\":true})\n          setErrorMessage({...errorMessage,\"name\":\"Course specification already exists\"})\n          setStageLoading(false);\n        }\n    }\n  }\n   \n  return (\n    <ThemeProvider theme={theme}>\n    <Container component=\"main\" maxWidth=\"md\">\n      <CssBaseline />\n      <div className={classes.paper}>\n        <form required error={error}  onSubmit={(e) => { e.preventDefault(); handleSubmit(); } } component=\"fieldset\" className={classes.form} >\n        <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            fullWidth\n            id=\"standard-required\"\n            label=\"Health Team Name\"\n            name=\"name\"\n            autoComplete=\"off\"\n            onFocus={()=>{setErrors({...errors,\"name\":false});\n            setErrorMessage({...errorMessage,\"name\":\"\"})}} \n            error={errors[\"name\"]}\n            helperText={errorMessage[\"name\"]}\n            autoFocus\n            value={state.name}\n            onChange={handleInputChange}\n          />\n        <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            fullWidth\n            id=\"standard-required\"\n            label=\"Email\"\n            name=\"name\"\n            autoComplete=\"off\"\n            onFocus={()=>{setErrors({...errors,\"name\":false});\n            setErrorMessage({...errorMessage,\"name\":\"\"})}} \n            error={errors[\"name\"]}\n            helperText={errorMessage[\"name\"]}\n            autoFocus\n            value={state.name}\n            onChange={handleInputChange}\n          />\n        <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            fullWidth\n            id=\"standard-required\"\n            label=\"Phone\"\n            name=\"name\"\n            autoComplete=\"off\"\n            onFocus={()=>{setErrors({...errors,\"name\":false});\n            setErrorMessage({...errorMessage,\"name\":\"\"})}} \n            error={errors[\"name\"]}\n            helperText={errorMessage[\"name\"]}\n            autoFocus\n            value={state.name}\n            onChange={handleInputChange}\n          />\n        <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            fullWidth\n            id=\"standard-required\"\n            label=\"Pin\"\n            name=\"name\"\n            autoComplete=\"off\"\n            onFocus={()=>{setErrors({...errors,\"name\":false});\n            setErrorMessage({...errorMessage,\"name\":\"\"})}} \n            error={errors[\"name\"]}\n            helperText={errorMessage[\"name\"]}\n            autoFocus\n            value={state.name}\n            onChange={handleInputChange}\n          />\n          <div className={classes.formButton}>  \n          <Button variant=\"contained\" fullWidth className={classes.reset} onClick={reset}  disabled={stateLoading || stageLoading}>\n                {type === 'Add'?'Clear':'Reset'}\n              </Button>\n\n              <Button\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"red\"\n                disabled={stateLoading || stageLoading}\n                fullWidth\n                id='submit'\n                className={classes.submit}\n              >\n                {type} {stageLoading ? <CircularProgress size={15} color=\"primary\" className={classes.submitLoadingIcon} /> : '' }\n              </Button>\n          </div>\n        </form>\n      </div>\n      <Divider className={classes.dividerBottom}/>\n    </Container>\n    </ThemeProvider>\n  );\n}"]},"metadata":{},"sourceType":"module"}