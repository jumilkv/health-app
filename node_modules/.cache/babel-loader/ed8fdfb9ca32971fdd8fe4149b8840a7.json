{"ast":null,"code":"var _jsxFileName = \"/home/jumil/Documents/Jumil/Health App/health-app/src/Health Centre/snack.js\";\nimport React from 'react';\nimport clsx from 'clsx';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport InfoIcon from '@material-ui/icons/Info';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { amber, green } from '@material-ui/core/colors';\nimport IconButton from '@material-ui/core/IconButton';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport { makeStyles } from '@material-ui/core/styles';\nconst variantIcon = {\n  success: CheckCircleIcon,\n  warning: WarningIcon,\n  error: ErrorIcon,\n  info: InfoIcon\n};\nconst useStyles1 = makeStyles(theme => ({\n  success: {\n    backgroundColor: green[600],\n    fontSize: '15px'\n  },\n  error: {\n    backgroundColor: theme.palette.error.dark,\n    fontSize: '15px'\n  },\n  info: {\n    backgroundColor: theme.palette.primary.main,\n    fontSize: '15px'\n  },\n  warning: {\n    backgroundColor: amber[700],\n    fontSize: '15px'\n  },\n  icon: {\n    fontSize: '15px'\n  },\n  iconVariant: {\n    opacity: 0.9,\n    marginRight: theme.spacing(1)\n  },\n  message: {\n    display: 'flex',\n    alignItems: 'center',\n    fontFamily: 'monospace'\n  }\n}));\n\nfunction MySnackbarContentWrapper(props) {\n  const classes = useStyles1();\n  const {\n    className,\n    message,\n    onClose,\n    variant,\n    ...other\n  } = props;\n  const Icon = variantIcon[variant];\n  return /*#__PURE__*/React.createElement(SnackbarContent, Object.assign({\n    className: clsx(classes[variant], className),\n    \"aria-describedby\": \"client-snackbar\",\n    message: /*#__PURE__*/React.createElement(\"span\", {\n      id: \"client-snackbar\",\n      className: classes.message,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Icon, {\n      className: clsx(classes.icon, classes.iconVariant),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }\n    }), message),\n    action: [/*#__PURE__*/React.createElement(IconButton, {\n      key: \"close\",\n      \"aria-label\": \"close\",\n      color: \"inherit\",\n      onClick: onClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(CloseIcon, {\n      className: classes.icon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }\n    }))]\n  }, other, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }));\n}\n\nexport default function CustomizedSnackbars(props) {\n  const [open, setOpen] = React.useState(true);\n\n  const handleClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Snackbar, {\n    anchorOrigin: {\n      vertical: 'bottom',\n      horizontal: 'left'\n    },\n    open: open,\n    autoHideDuration: 5000,\n    onClose: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(MySnackbarContentWrapper, {\n    onClose: handleClose,\n    variant: props.variant,\n    message: props.message,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  })));\n}","map":{"version":3,"sources":["/home/jumil/Documents/Jumil/Health App/health-app/src/Health Centre/snack.js"],"names":["React","clsx","CheckCircleIcon","ErrorIcon","InfoIcon","CloseIcon","amber","green","IconButton","Snackbar","SnackbarContent","WarningIcon","makeStyles","variantIcon","success","warning","error","info","useStyles1","theme","backgroundColor","fontSize","palette","dark","primary","main","icon","iconVariant","opacity","marginRight","spacing","message","display","alignItems","fontFamily","MySnackbarContentWrapper","props","classes","className","onClose","variant","other","Icon","CustomizedSnackbars","open","setOpen","useState","handleClose","event","reason","vertical","horizontal"],"mappings":"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","sourcesContent":["import React from 'react';\nimport clsx from 'clsx';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport InfoIcon from '@material-ui/icons/Info';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { amber, green } from '@material-ui/core/colors';\nimport IconButton from '@material-ui/core/IconButton';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst variantIcon = {\n  success: CheckCircleIcon,\n  warning: WarningIcon,\n  error: ErrorIcon,\n  info: InfoIcon,\n};\n\nconst useStyles1 = makeStyles(theme => ({\n  success: {\n    backgroundColor: green[600],\n    fontSize: '15px',\n  },\n  error: {\n    backgroundColor: theme.palette.error.dark,\n    fontSize: '15px',\n  },\n  info: {\n    backgroundColor: theme.palette.primary.main,\n    fontSize: '15px',\n  },\n  warning: {\n    backgroundColor: amber[700],\n    fontSize: '15px',\n  },\n  icon: {\n    fontSize: '15px',\n  },\n  iconVariant: {\n    opacity: 0.9,\n    marginRight: theme.spacing(1),\n  },\n  message: {\n    display: 'flex',\n    alignItems: 'center',\n    fontFamily:'monospace'\n  },\n}));\n\nfunction MySnackbarContentWrapper(props) {\n  const classes = useStyles1();\n  const { className, message, onClose, variant, ...other } = props;\n  const Icon = variantIcon[variant];\n\n  return (\n    <SnackbarContent\n      className={clsx(classes[variant], className)}\n      aria-describedby=\"client-snackbar\"\n      message={\n        <span id=\"client-snackbar\" className={classes.message}>\n          <Icon className={clsx(classes.icon, classes.iconVariant)} />\n          {message}\n        </span>\n      }\n      action={[\n        <IconButton key=\"close\" aria-label=\"close\" color=\"inherit\" onClick={onClose}>\n          <CloseIcon className={classes.icon} />\n        </IconButton>,\n      ]}\n      {...other}\n    />\n  );\n}\n\nexport default function CustomizedSnackbars(props) {\n\n  const [open, setOpen] = React.useState(true);\n  const handleClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setOpen(false);\n  };\n\n  return (\n    <div>\n      <Snackbar\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'left',\n        }}\n        open={open}\n        autoHideDuration={5000}\n        onClose={handleClose}\n      >\n        <MySnackbarContentWrapper\n          onClose={handleClose}\n          variant={props.variant}\n          message={props.message}\n        />\n      </Snackbar>\n      \n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}